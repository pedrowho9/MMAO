%matplotlib inline

import numpy as np
import matplotlib.pyplot as plt

a = [150.2, 150.3, 149.5, 150.0, 150.4, 149.6]  # Medidas da Balança A
b = [150.1, 149.5, 150.2, 150.1, 149.7, 150.4]  # Medidas da Balança B

mean_a = np.mean(a)   # Média das medidas da Balança A
mean_b = np.mean(b)   # Média das medidas da Balança B

var_a = np.var(a)    # Variância das medidas da Balança A
var_b = np.var(b)    # Variância das medidas da Balança B

std_a = np.std(a)    # Desvio Padrão das medidas da Balança A
std_b = np.std(b)    # Desvio Padrão das medidas da Balança B


print('Média da Balança A: {} mg'.format(mean_a)), print('Média da Balança B: {} mg'.format(mean_b))
print('Desvio Padrão da Balança A: {}'.format(std_a)), print('Desvio Padrão da Balança B: {}'.format(std_b))


sA = np.random.normal(mean_a, std_a, 1000)
countA, bins, ignored_ = plt.hist(sA, 30, normed=True, alpha=0)   # Histograma oculto (alpha) de Bal. A

sB = np.random.normal(mean_b, std_b, 1000)
countB, bins, ignored = plt.hist(sB, 30, normed=True, alpha=0)  # Histograma oculto (alpha) de Bal. B

plt.plot(bins, 1/(std_a * np.sqrt(2 * np.pi)) * np.exp( - (bins - mean_a)**2 / (2 * std_a**2)), linewidth=2, label='Bal. A') # Criando a curva normal referente à Bal.A
plt.plot(bins, 1/(std_b * np.sqrt(2 * np.pi)) * np.exp( - (bins - mean_b)**2 / (2 * std_b**2)), linewidth=2, label='Bal. B') # Criando a curva normal referente à Bal.B

plt.axvline(150.0, linestyle='dotted', color='r', label='Mean') # Linha vertical que evidencia a média

plt.legend()
plt.show()
